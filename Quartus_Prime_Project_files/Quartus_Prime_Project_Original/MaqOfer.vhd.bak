library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity MaqOferFSM is 
	port(clk : in std_logic;
		  reset : in std_logic;
		  Kenter : in std_logic;
		  Knext : in std_logic;
		  Kback : in std_logic;
		  Ktam : in std_logic;
		  startOK :in std_logic;
		  running :out std_logic;
		  Start_seq : out std_logic;
		  bottle_out_dispense :out std_logic;
		  bottle_out_ok : in std_logic;
		  bottle_out_led : out std_logic;
		  display_code : out std_logic_vector(19 downto 0); -- This is the output to the displays, it send a 20bit code, that separates into 4 - 5 bit codes relating to each letter/number
		  displays_enable : out std_logic_vector(3 downto 0) --this controls the enable each separate display 
		  
		  );
end MaqOferFSM;

architecture FSM of MaqOferFSM is

type Mstate is (start, menu_drink, coke, water, orange, menu_size, tam_25, tam_33, tam_50, tam_10, output);

signal state : Mstate;

begin 
process (clk, reset)
	begin 	
		if reset = '1' then
	   state	<= start;
		elsif(rising_edge(clk)) then
			
			case state is 
				
				when start=>
				running <= '1';
				Start_seq <= '1';
				bottle_out_led <= '0';
				displays_enable <= "1110"; -- the last screen is disabled since the word only has 3 letters
				display_code <= "00000110000101010110"; --OLA 
				
				
				if startOK = '1' then
						state <= menu_drink;
					else 
						state <= start;
					end if;
				
				when menu_drink=>
				running <= '1';
				displays_enable <= "1111";
				display_code <= "01110110101111011101"; --EPro - choose a product
				
					if Kenter = '0' then
						state <= coke;
					else 
						state <= menu_drink;
					end if;
				
				when coke=>
				displays_enable <= "1111";
				display_code <= "01100111010110001010"; -- COCA /coke
					if Kenter = '0' then 
						state <= output;
					elsif Knext = '0' then
						state <= water;
					elsif Ktam = '0' then
						state <= menu_size;
					else 
						state <= coke;
					end if;
								when water=>
				displays_enable <= "1111";
				display_code <= "01010001101101101010"; -- A6UA / water
					if Kenter = '0' then 
						state <= output;
					elsif Knext = '0' then 
						state <= Orange;
					elsif Kback = '0'then 
						state <= coke;
					elsif Ktam = '0' then
						state <= menu_size;
					else 
						state <= water;
					end if;
					
				when orange =>
				displays_enable <= "1111";
				display_code <= "00101110000101011110"; -- 5Lar / orange
					if Kenter = '0' then 
						state <= output;
					elsif Knext = '0' then 
						state <= water;
					elsif Kback = '0' then
						state <= coke;
					elsif Ktam = '0' then
						state <= menu_size;
					else 
						state <= orange;
					end if;	
					
				when menu_size =>
					state <= tam_33;
				
				when tam_33 =>
				displays_enable <= "1111";
				display_code <= "00011000110110011000"; --33CL
					if Kenter = '0' then
						state <= output;
					elsif Knext = '0' then 
						state <= tam_50;
					elsif Kback = '0' then
						state <= tam_25;
					else 
						state <= tam_33;	
					end if;	
				
				when tam_50 =>
				displays_enable <= "1111";
				display_code <= "00101000000110011000"; --50CL
					if Kenter = '0' then
						state <= output;
					elsif Knext = '0' then 
						state <= tam_10;
					elsif Kback = '0' then
						state <= tam_33;
					else 
						state <= tam_50;
					end if;	
				
				when tam_10 =>
				displays_enable <= "1111";
				display_code <= "00001000000110111000"; --10dl
					if Kenter = '0' then
						state <= output;
					elsif Knext = '0' then 
						state <= tam_25;
					elsif Kback = '0' then
						state <= tam_50;
					else 
						state <= tam_10;	
					end if;
					
				when tam_25 =>
				displays_enable <= "1111";
				display_code <= "00010001010110011000"; --25CL
					if Kenter = '0' then
						state <= output;
					elsif Knext = '0' then 
						state <= tam_33;
					elsif Kback = '0' then
						state <= tam_10;
					else 
						state <= tam_25;
					end if;
					
				when output =>
				displays_enable <= "0000";
					bottle_out_dispense <= '1';
					if bottle_out_ok = '1' then
						bottle_out_dispense <= '0';
						bottle_out_led <= '1';
						if kenter = '0' then
						bottle_out_led <= '0';
						state <= menu_drink;
						end if;
					else 
						state <= output;
					end if;
					
				when others =>
				
				
			end case;
	end if;
end process;
end FSM;						